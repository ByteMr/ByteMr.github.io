<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ansen&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-10T09:39:02.116Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ansen zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJava 2.x 使用总结&lt;一&gt;</title>
    <link href="http://yoursite.com/2018/04/10/RxJava%202.x%20%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <id>http://yoursite.com/2018/04/10/RxJava 2.x 使用总结一/</id>
    <published>2018-04-10T01:58:17.000Z</published>
    <updated>2018-04-10T09:39:02.116Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录一下RxJava2.x的使用，其实网络上已经有很多关于RxJava的使用教程，以及原理剖析类的文章，其实我的理解大概也和那些文章中描述的也差不多，所以这里就不在过多去说类似的东西了。</p><p>在这里推荐一篇文章给大家，虽然是基于RxJava 1.X来写的，但是我觉得这是我目前见过写的比较清晰了然的一片文章，很适合初学者去对RxJava进行一番学习和使用。  </p><p><a href="http://gank.io/post/560e15be2dca930e00da1083#toc_1" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a>  </p><p>#基本使用</p><p>##添加依赖</p><pre><code>implementation &apos;io.reactivex.rxjava2:rxjava:2.1.12&apos;implementation &apos;io.reactivex.rxjava2:rxandroid:2.0.2&apos;implementation &apos;org.reactivestreams:reactive-streams:1.0.2&apos;implementation &apos;com.squareup.okhttp3:okhttp:3.10.0&apos;implementation &apos;com.squareup.retrofit2:retrofit:2.4.0&apos;implementation &apos;com.squareup.retrofit2:converter-gson:2.4.0&apos;implementation &apos;com.squareup.okhttp3:logging-interceptor:3.10.0&apos;implementation &apos;com.squareup.retrofit2:converter-scalars:2.4.0&apos;implementation &apos;com.squareup.retrofit2:adapter-rxjava2:2.4.0&apos;</code></pre><p>当然，上面添加的依赖有点多，但是其实你如果只需要使用RxJava只需要添加如下两个依赖就行。  </p><pre><code>implementation &apos;io.reactivex.rxjava2:rxjava:2.1.12&apos;implementation &apos;org.reactivestreams:reactive-streams:1.0.2&apos;</code></pre><p>但是你如果想要在android上面使用的话，就必须再多加上如下这个依赖。</p><pre><code>implementation &apos;io.reactivex.rxjava2:rxandroid:2.0.2&apos;</code></pre><p>我们知道现在主流用发就是，RxJava+OkHttp+Retrofit，这三者结合使用是让我们的代码更加简单有层次，提升性能有提升开发速度，所以你如果又要在你的项目中需要请求网络，需要传输json数据的话，不妨再加上如下几个依赖。</p><pre><code>implementation &apos;com.squareup.okhttp3:okhttp:3.10.0&apos;implementation &apos;com.squareup.retrofit2:retrofit:2.4.0&apos;implementation &apos;com.squareup.retrofit2:converter-gson:2.4.0&apos;implementation &apos;com.squareup.okhttp3:logging-interceptor:3.10.0&apos;implementation &apos;com.squareup.retrofit2:converter-scalars:2.4.0&apos;implementation &apos;com.squareup.retrofit2:adapter-rxjava2:2.4.0&apos;</code></pre><p>##使用create(…)创建Observable<br>create(…)方法是Observable对象的一个静态方法，主要用于创建产生一个Observable被观察者对象。  </p><pre><code>final Observable&lt;String&gt; observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;String&gt; emitter)throws Exception {        emitter.onNext(&quot;Hello!&quot;);        emitter.onNext(&quot;RxJava&quot;);        emitter.onNext(&quot;Hi!&quot;);        emitter.onNext(&quot;Android&quot;);    }});</code></pre><p>上面的代码我们使用create(…)方法创建了一个被观察者Observable，那么我们知道观察者Observer和被观察者Observable之间事件的订阅关系是通过subscribe(…)方法来实现的，一般来说，订阅事件是发生在观察者身上的，因为观察者需要关注订阅发生在被观察者身上的一系列事件，但是在RxJava中，为了方便链式的调用以及RxJava的架构，这个subscribe(…)方法声明在了Observable对象上，现在我们先来创建一个观察者Observer。  </p><pre><code>final Observer&lt;String&gt; observer = new Observer&lt;String&gt;() {               @Override               public void onSubscribe(Disposable disposable) {                   System.out.println(&quot;Observer.onSubscribe :  isDisposable = &quot;  +disposable.isDisposed());               }               @Override               public void onNext(String content) {                   System.out.println(&quot;Observer.onNext :  content = &quot;  +content);               }               @Override               public void onError(Throwable throwable) {                   System.out.println(&quot;Observer.onError &quot;);               }               @Override               public void onComplete() {                   System.out.println(&quot;Observer.onComplete &quot;);               }           };</code></pre><p>Observer我们创建好了，我们发现需要Override四个方法。  </p><pre><code>public void onSubscribe(Disposable disposable)；public void onNext(String content) ；public void onError(Throwable throwable)；public void onComplete()；</code></pre><p>但是细心的就会发现，我们Observable持有的一个发射器ObservableEmitter，这个对象也有三个比较关键的方法。  </p><p>不然发现，是onNext()、onError()、onComplete()三个方法，看起来是和Observer中其中的三个需要Override的方法是对应的。</p><p>这样我就把观察者Observer和被观察者Observable创建好了，接下来要做的就是使用subscribe(…)方法把他们关联起来。  </p><pre><code>observable.subscribe(observer);</code></pre><p>OK，这就把两者的关系给绑定起来了，另外要注意的是，这个方法一旦调用，也就是说，一旦注册订阅，被观察着的事件发射器就开发发射事件，接着观察者的方法就会被被调用。<br>代码的运行结果吧！  </p><pre><code>Observer.onSubscribe :  isDisposable = falseObserver.onNext :  content = Hello!Observer.onNext :  content = RxJavaObserver.onNext :  content = Hi!Observer.onNext :  content = Android</code></pre><p>从上面的打印来看，当订阅成功后，会立马先调用Observer的onSubscribe方法，然后会依次按顺序打印了Hello!-&gt;RxJava-&gt;Hi!-&gt;Android  </p><p>从上面的代码中，我们知道，和1.x想比，2.X多了一个<strong>Disposable</strong>，我们可以看到在onSubscribe()方法中会传递过来一个Disposable对象，那么这个Disposable其实可以看做是连接Observer和Observable的一个开关，拿到它之后，可以直接调用切断，来解除Observer对Observable的关注和订阅，但是这也意味着，Observer不在能收到订阅事件了，所以Disposable的dispose()方法就可以切断两者的事件驱动，当Disposable的isDisposed()方法返回false的时候，表明正常，可以发送接收事件，但是为true的时候，表明两者事件驱动被切断。  </p><p>##调用onComplete()会如何？<br>我们发现上面的实例代码中，仅仅只是调用了onNext(…)方法触发了四个事件，然后Observer接收处理了相应的事件，我们稍微改动一下代码，然后在我们的代码中调用一下onComplete()看看会有什么效果呢？  </p><pre><code>final Observable&lt;String&gt; observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;String&gt; emitter)throws Exception {        emitter.onNext(&quot;Hello!&quot;);        emitter.onNext(&quot;RxJava&quot;);        emitter.onComplete();        emitter.onNext(&quot;Hi!&quot;);        emitter.onNext(&quot;Android&quot;);    }});</code></pre><p>我们看到，在subscribe(…)方法中，我在四个onNext()调用顺序之间加了一句代码，即调用了onComplete方法，然后我们再来执行一下代码，看看会有什么结果。  </p><pre><code>Observer.onSubscribe :  isDisposable = falseObserver.onNext :  content = Hello!Observer.onNext :  content = RxJavaObserver.onComplete </code></pre><p>结果，我们发现，我们只收到了调用onComplete()方法之前的两个onNext事件，然后就直接执行了Observer的onComplete()方法，由此可知，当调用发射器的onComplete()方法之后，后面的事件是无法再收到了，但是事件的发送还在继续。  </p><p>##简化的Consumer<br>有时候我们觉得使用Observer比较复杂，我们知道Observer是一个接口，如果要实现Observer接口，那么必须覆盖其四个抽象方法，比如有些时候我们只关注订阅的事件，只对订阅的事件的发生做出<br>相应的操作，那么一般我们只需要Override  onNext(…){}即可。  </p><p>如果说RxJava中两个重要的角色关系是观察者和被观察的关系的话，被观察者产生事件，观察者响应事件，那么是不是也可以理解为这是一种生产者和消费者的关系，很显然这么理解是可以的。  </p><p>所以RxJava中有一个用起来比简单的Consumer，实现Consumer 接口只需要实现一个方法，即accept(…)，当然Observable和Consumer之间也是通过Observable的subscribe来建立订阅关系的，OK我们之间写一段代码来运行试试看。  </p><pre><code>final Observable&lt;String&gt; observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;String&gt; emitter)throws Exception {        emitter.onNext(&quot;Hello!&quot;);        emitter.onNext(&quot;RxJava&quot;);        emitter.onComplete();        emitter.onNext(&quot;Hi!&quot;);        emitter.onNext(&quot;Android&quot;);    }});final Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() {            @Override    public void accept(String content) throws Exception {            System.out.println(&quot;Consumer.accept : content = &quot;+content);    }};final Disposable disposable = observable.subscribe(consumer);</code></pre><p>我们的Observable没有变，还有前面创建的对象，我们来试试运行结果。  </p><pre><code>Consumer.accept : content = Hello!Consumer.accept : content = RxJava</code></pre><p>我们发现Consumer的accept()方法只调用了两次，只打印了“Hello！” 和 “RxJava”，和使用Observer的不同之处在于，Observer会关注Observable的任何一个操作，比如，onError()、onComplete()方法，而Consumer就比较简单了，只需要关注和响应onNext(…)事件就行了，有时候我们可能就只需这样简单的场景，当然这是RxJava 2.x出现的特性。</p><p>但是我们还发现，使用订阅Consumer的时候，会直接返回一个Disposable对象。</p><p>##事件的转换包装器map</p><p>先不说map的功能，我们先直接看一段代码，再来谈谈map的功能。  </p><pre><code>Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter)throws Exception {        emitter.onNext(100);        emitter.onNext(200);        emitter.onNext(300);        emitter.onNext(400);    }}).map(new Function&lt;Integer, String&gt;() {    @Override    public String apply(Integer num) throws Exception {        System.out.println(&quot;Function.apply : num = &quot;+num);        return &quot;我得了&quot;+num+&quot;分&quot;;    }}).subscribe(new Consumer&lt;String&gt;() {    @Override    public void accept(String content) throws Exception {        System.out.println(&quot;Consumer.accept : content = &quot;+content);    }});</code></pre><p>运行结果:  </p><pre><code>Function.apply : num = 100Consumer.accept : content = 我得了100分Function.apply : num = 200Consumer.accept : content = 我得了200分Function.apply : num = 300Consumer.accept : content = 我得了300分Function.apply : num = 400Consumer.accept : content = 我得了400分</code></pre><p>可以看到，是先执行了map节点中Function对象的apply方法，这个方法接收一个Integer类型的数据，然后返回一个String类型的数据，继apply(…)方法之后是Consumer的accept(…)方法，而accept收到的参数是一个String类型，其值就是通过Function对象的apply方法返回来的。  </p><p>那么不难发现，我们可以把map节点中的Function看做一个工厂，把Integer泛型限定的Observable(Observable(Integer))转换成了String类型的Observable(Observable<string>)。</string></p><p>其实我们把每个节点分开来写会更加清晰一点。  </p><pre><code>final Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter)throws Exception {        emitter.onNext(100);        emitter.onNext(200);        emitter.onNext(300);        emitter.onNext(400);    }});</code></pre><p>不难发现，首先初始是一个Observable<integer>类型的，当我们调用起map方法之后就变成了Observable<string>类型了。  </string></integer></p><pre><code>final Observable&lt;String&gt; observable2 = observable.map(new Function&lt;Integer, String&gt;() {    @Override    public String apply(Integer num) throws Exception {        System.out.println(&quot;Function.apply : num = &quot;+num);        return &quot;我得了&quot;+num+&quot;分&quot;;    }});</code></pre><p>最后再调用了subscribe方法进行关联订阅。  </p><pre><code>observable2.subscribe(new Consumer&lt;String&gt;() {    @Override    public void accept(String content) throws Exception {        System.out.println(&quot;Consumer.accept : content = &quot;+content);    }});</code></pre><p>所以通过上面的一个小例子，我们不难发现，map基本作用就是将一个 Observable 通过某种函数关系，转换为另一种 Observable，上面例子中就是把我们的 Integer 数据变成了 String 类型。</p><p>##事件组合器zip</p><pre><code>final Observable&lt;Integer&gt; integerObservable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter)throws Exception {        emitter.onNext(100);        emitter.onNext(80);        emitter.onNext(60);    }});final Observable&lt;String&gt; stringObservable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;String&gt; emitter)throws Exception {        emitter.onNext(&quot;优&quot;);        emitter.onNext(&quot;良&quot;);        emitter.onNext(&quot;及格&quot;);    }});final Observable&lt;String&gt; resultObservable = Observable.zip(integerObservable,stringObservable, new BiFunction&lt;Integer, String, String&gt;() {    @Override    public String apply(Integer score, String desc)throws Exception {        System.out.println(&quot;&lt;zip&gt;.BiFunction.apply : score = &quot;+score+&quot; , desc = &quot;+desc);        return score +&quot; 分为 &quot;+ desc;    }});resultObservable.subscribe(new Consumer&lt;String&gt;() {    @Override    public void accept(String content) throws Exception {        System.out.println(&quot;Consumer.accept : content = &quot;+content);    }});</code></pre><p>那么直接看结果。  </p><pre><code>&lt;zip&gt;.BiFunction.apply : score = 100 , desc = 优Consumer.accept : content = 100 分为 优&lt;zip&gt;.BiFunction.apply : score = 80 , desc = 良Consumer.accept : content = 80 分为 良&lt;zip&gt;.BiFunction.apply : score = 60 , desc = 及格Consumer.accept : content = 60 分为 及格</code></pre><p>我们发现，通过调用Observable的zip(…)方法，方法最后的以参数为一个BiFunction对象，很巧妙的将两个事件进行组合，组合成了一个新的Observable<string>。</string></p><p>zip 组合事件的过程就是分别从integerObservable和stringObservable各取出一个事件来组合，并且一个事件只能被使用一次，组合的顺序是严格按照事件发送的顺序来进行的，所以上面的实例可以看到，100 永远和 “优”结合，80永远和“良”结合等。  </p><p>那么会有一个问题，如果我在integerObservable中发送三个事件，在stringObservable发送一个或者两个，或者三个，甚至一个都不发呢?这种情况是如何执行的呢？不妨来来试试看吧，我们改动一下stringObservable里面的逻辑吧。</p><pre><code>final Observable&lt;String&gt; stringObservable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;String&gt; emitter)throws Exception {        emitter.onNext(&quot;优&quot;);        emitter.onNext(&quot;良&quot;);    }});</code></pre><p>执行结果如下。  </p><pre><code>&lt;zip&gt;.BiFunction.apply : score = 100 , desc = 优Consumer.accept : content = 100 分为 优&lt;zip&gt;.BiFunction.apply : score = 80 , desc = 良Consumer.accept : content = 80 分为 良</code></pre><p>我们发现少了一个60和”及格”的组合。<br>然后我们全部去掉，什么都不发送呢？  </p><pre><code>final Observable&lt;String&gt; stringObservable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {    @Override    public void subscribe(ObservableEmitter&lt;String&gt; emitter)throws Exception {    }});</code></pre><p>再执行，我们发现，什么打印都没有。所以我们可以总结为最终接收到的事件数量是和发送事件最少的那个Observable发送器的发送事件数目相同，如果其中一个什么都没发送，那么什么事件都接收不到。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要记录一下RxJava2.x的使用，其实网络上已经有很多关于RxJava的使用教程，以及原理剖析类的文章，其实我的理解大概也和那些文章中描述的也差不多，所以这里就不在过多去说类似的东西了。&lt;/p&gt;
&lt;p&gt;在这里推荐一篇文章给大家，虽然是基于RxJava 1.X来写的，
      
    
    </summary>
    
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+Github搭建个人博客</title>
    <link href="http://yoursite.com/2018/04/09/%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/09/使用Hexo-Github搭建个人博客/</id>
    <published>2018-04-09T03:47:12.000Z</published>
    <updated>2018-04-09T07:02:14.781Z</updated>
    
    <content type="html"><![CDATA[<p>本篇不在介绍Hexo和Github以及Github pages相关的东西，直接介绍我搭建的每一个步骤，如果想要了解Hexo和Github这块的东西，可以自行去百度或者google了解。</p><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ol><li><p><strong>安装node.js</strong><br> 直接去官网下载即可。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a>,<br> node.js在我们的博客搭建过程主要提供包管理服务，<br> Node.js的包管理器npm，是全球最大的开源库生态系统。</p></li><li><p><strong>安装Git</strong><br> 直接官网下载即可。<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br> Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地<br> 处理任何或小或大的项目，版本控制。</p></li><li><p><strong>进入Node.js的根目录，执行如下命令安装Hexo</strong><br><code>npm install hexo -g</code></p></li><li><p><strong>在磁盘上创建一个目录用来存放Blog的所有文件</strong><br> 例如 <code>E:\blog\MrByte</code></p></li><li><p><strong>在步骤4中创建的目录中执行如下命令初始化Blog</strong><br><code>hexo init</code></p></li><li><strong>安装依赖包</strong><br><code>npm install</code></li><li><strong>测试-创建一个篇新的博客</strong><br><code>hexo new &quot;My New Post&quot;</code></li><li><strong>启动服务并测试本地发布</strong><br>执行命令:<br><code>hexo server</code><br>在浏览器输入敲回车:    <code>http://localhost:4000</code></li><li><p><strong>搭桥到github</strong>  </p><p> <strong>A、</strong>创建一个repository，其中[repository name]的格式必须如下:  </p><pre><code>例如: yourname.github.io  其中yourname部分必须和github账号名一致，否则无效。  </code></pre><p> <strong>B、</strong>打开git bash命令行窗口，配置github账号信息,执行如下两条命令<br><code>git config --global user.name &quot;yourName&quot;</code><br><code>git config --global user.email &quot;yourEmail&quot;</code><br>把yourName改为github账号，把yourEmail改为注册Github用的邮箱即可。<br> <strong>C、</strong>在git bash命令窗口中执行如下命令创建SSH<br><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br>然后在生成的id_rsa.pub中复制其全部内容,双引号中的邮箱改为注册Github用的邮箱即可。<br> <strong>D、</strong>然后登入github，选择[Settings]-[SSH and GPG keys]-[New SSH key]  </p><pre><code>然后粘贴上述复制的SSH public key即可。  </code></pre><p> <strong>E、</strong>然后在git bash命令行中执行如下命令行进行验证<br><code>ssh -T git@github.com</code><br> <strong>F、</strong>在blog项目根目录中找到[_config.yml]文件，使用文本编辑器打开,<br>每个字段的冒号后面都有一个空格。 </p><blockquote><p>deploy:<br>type: git<br>repository: <a href="https://ByteMr:******@github.com/ByteMr/ByteMr.github.io.git" target="_blank" rel="noopener">https://ByteMr:******@github.com/ByteMr/ByteMr.github.io.git</a><br>branch: master  </p></blockquote><p> 上述repositoy字段中的地址中，冒号后后面出现*号，这里应该替换成你真实的github账号密码，ByteMr则为真实的github账号</p></li><li><p><strong>上传到github</strong><br><strong>A、</strong>执行如下命令，这样才能将你写好的文章部署到github服务器上并让别人浏览到<br><code>npm install hexo-deployer-git --save</code><br><strong>B、</strong>发布  </p><blockquote><p> hexo clean<br> hexo generate<br> hexo deplo  </p></blockquote></li><li><p><strong>测试是否发布成功</strong><br>浏览器输入：    <a href="http://yourgithubname.github.io" target="_blank" rel="noopener">http://yourgithubname.github.io</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇不在介绍Hexo和Github以及Github pages相关的东西，直接介绍我搭建的每一个步骤，如果想要了解Hexo和Github这块的东西，可以自行去百度或者google了解。&lt;/p&gt;
&lt;h1 id=&quot;搭建步骤&quot;&gt;&lt;a href=&quot;#搭建步骤&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>我的博客上线啦</title>
    <link href="http://yoursite.com/2018/04/08/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF%E5%95%A6/"/>
    <id>http://yoursite.com/2018/04/08/我的博客上线啦/</id>
    <published>2018-04-08T11:06:04.000Z</published>
    <updated>2018-04-09T01:20:37.927Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo+Github page 搭建的个人博客上线了，后续会在上面书写我的学习笔记和文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Hexo+Github page 搭建的个人博客上线了，后续会在上面书写我的学习笔记和文章。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
